"""
Handling AS/400 controller objects
"""
from pywin32 import win32com.client
ConnList = win32com.client.Dispatch("PCOMM.autECLConnList")
Session = win32com.client.Dispatch("PCOMM.autECLSession")
Metrics = win32com.client.Dispatch("PCOMM.autECLWinMetrics")
Operator = win32com.client.Dispatch("PCOMM.autECLOIA")
Presentation = None

"""
Using .format
"""
def __str__(self):
	return ‘{} {}, HP: {}, XP: {}’.format(self.color.title(),
				     self.__class__.__name__,
				     self.hit_points,
				     self.experience)

"""
Using kwargs
"""
"""
>>> my_string = “Hello, my name is {name} and I live in {state}.”
>>> my_dict = {‘name’: “Kenneth”, ‘state’: “Oregon”}
>>> my_string.format(**my_dict)
“Hello, my name is Kenneth and I live in Oregon.”
"""
def __init__(self, **kwargs):

	for key, value in kwargs.items():
		setattr(self, key, value)
		
"""
Regex & Databases
"""
"""
import re		# regular expressions

names_file = open(“names.txt”, encoding=”utf-8”)
data = names_file.read()
names_file.close()

r’Hello’  << raw string input
Escape characters, regex counts >> re.findall(r’\d{3}’, data)  ;  sets >> [a-z]
re.compile is useful for looping
"""
peewee ORM
.create()   .select()   .save()   .get()   .delete_instance()
CRUD: Create, Read, Update, Delete records

from peewee import *

db = SqliteDatabase('students.db')

class Student(Model):
  username = CharField(max_length=255, unique=True)
  points = IntegerField(default=0)
  
  class Meta:
    database = db
    
if __name__ == '__main__':
  db.connect()
  db.create_tables([Student], safe=True) # safe, in case if run multiple times

#!/user/bin/env python3
from collections import OrderedDict
import datetime
from peewee import *
db = SqliteDatabase('diary.db')
class Entry(Model):
  content = TextField()
  timestamp = DateTimeField(default=datetime.datetime.now)
  class Meta:
    database = db
def initialize():
  """Create database and table if they don't exist."""
  db.connect()
  db.create_tables([Entry], safe=True)
def menu_loop():
  """Show the menu"""
  choice = None
  while choice != 'q':
    print("Enter 'q' to quit.")
    for key, value in menu.items():
      print('{}) {}'.format(key,value.__doc__)) # returns the docstring
    choice = input('Action: ').lower().strip()
    if choice in menu:
      menu[choice]()
def add_entry():
  """Add an entry."""
def view_entries():
  """View previous entries."""
def delete_entry(entry):
  """Delete an entry."""
menu = OrderedDict([
    ('a', add_entry),
    ('v', view_entries),
]) # remembers the order; as tuples
if __name__=='__main__':
  initialize()
  menu_loop()

